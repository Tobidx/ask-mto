# Azure DevOps CI/CD Pipeline for Ask MTO RAG System
# Builds, tests, and deploys the application to Azure

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - ask-mto-genai/*
    - ask-mto-ui/*
    - azure-pipelines.yml

variables:
- group: ask-mto-variables
- name: pythonVersion
  value: '3.11'
- name: nodeVersion
  value: '20.x'
- name: vmImageName
  value: 'ubuntu-latest'
- name: azureSubscription
  value: 'ask-mto-service-connection'
- name: resourceGroupName
  value: 'ask-mto-rg'
- name: appServiceName
  value: 'ask-mto-api'
- name: frontendAppName
  value: 'ask-mto-ui'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildBackend
    displayName: 'Build Python Backend'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        cd ask-mto-genai
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python dependencies'
    
    - script: |
        cd ask-mto-genai
        # Run basic import tests
        python -c "import app.main; print('‚úÖ Main module imports successfully')"
        python -c "import app.eval_ragas; print('‚úÖ RAGAS module imports successfully')"
        python -c "import app.monitoring; print('‚úÖ Monitoring module imports successfully')"
        python -c "import app.semantic_kernel; print('‚úÖ Semantic Kernel module imports successfully')"
      displayName: 'Run import tests'
      continueOnError: true
    
    - task: ArchiveFiles@2
      displayName: 'Archive backend files'
      inputs:
        rootFolderOrFile: 'ask-mto-genai'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/backend.zip
        replaceExistingArchive: true
    
    - publish: $(Build.ArtifactStagingDirectory)/backend.zip
      artifact: backend
      displayName: 'Publish backend artifact'

  - job: BuildFrontend
    displayName: 'Build Next.js Frontend'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(nodeVersion)'
      displayName: 'Use Node.js $(nodeVersion)'
    
    - script: |
        cd ask-mto-ui
        npm ci
      displayName: 'Install Node.js dependencies'
    
    - script: |
        cd ask-mto-ui
        npm run build
      displayName: 'Build Next.js app'
      env:
        CI: true
    
    - task: ArchiveFiles@2
      displayName: 'Archive frontend files'
      inputs:
        rootFolderOrFile: 'ask-mto-ui'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/frontend.zip
        replaceExistingArchive: true
    
    - publish: $(Build.ArtifactStagingDirectory)/frontend.zip
      artifact: frontend
      displayName: 'Publish frontend artifact'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  
  jobs:
  - deployment: DeployBackend
    displayName: 'Deploy Backend API'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: backend
            displayName: 'Download backend artifact'
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(appServiceName)'
              package: '$(Pipeline.Workspace)/backend/backend.zip'
              runtimeStack: 'PYTHON|3.11'
              startUpCommand: 'python -m uvicorn app.main:app --host 0.0.0.0 --port 8000'
              appSettings: |
                -WEBSITES_PORT 8000
                -SCM_DO_BUILD_DURING_DEPLOYMENT true
                -ENABLE_ORYX_BUILD true
                -OPENAI_API_KEY $(OPENAI_API_KEY)
                -AZURE_COSMOS_CONNECTION_STRING $(AZURE_COSMOS_CONNECTION_STRING)
                -AZURE_AI_SEARCH_SERVICE_NAME $(AZURE_AI_SEARCH_SERVICE_NAME)
                -AZURE_AI_SEARCH_API_KEY $(AZURE_AI_SEARCH_API_KEY)
                -AZURE_COGNITIVE_SERVICES_ENDPOINT $(AZURE_COGNITIVE_SERVICES_ENDPOINT)
                -AZURE_COGNITIVE_SERVICES_KEY $(AZURE_COGNITIVE_SERVICES_KEY)

  - deployment: DeployFrontend  
    displayName: 'Deploy Frontend'
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: frontend
            displayName: 'Download frontend artifact'
          
          - task: AzureStaticWebApp@0
            displayName: 'Deploy to Azure Static Web Apps'
            inputs:
              azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN)'
              app_location: '$(Pipeline.Workspace)/frontend'
              output_location: '.next'

- stage: PostDeploy
  displayName: 'Post-Deployment Tests'
  dependsOn: Deploy
  condition: succeeded()
  
  jobs:
  - job: HealthCheck
    displayName: 'Health Check'
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - script: |
        echo "üîç Running health checks..."
        
        # Check backend API health
        echo "Checking backend API..."
        curl -f "https://$(appServiceName).azurewebsites.net/docs" || echo "‚ö†Ô∏è Backend health check failed"
        
        # Check frontend
        echo "Checking frontend..."
        curl -f "https://$(frontendAppName).azurestaticapps.net" || echo "‚ö†Ô∏è Frontend health check failed"
        
        echo "‚úÖ Health checks completed"
      displayName: 'Run health checks'
      continueOnError: true
    
    - script: |
        echo "üìä Running basic API tests..."
        
        # Test basic ask endpoint
        curl -X POST "https://$(appServiceName).azurewebsites.net/ask" \
          -H "Content-Type: application/json" \
          -d '{"question": "How do I get my G1 license?"}' \
          --max-time 30 || echo "‚ö†Ô∏è API test failed"
        
        echo "‚úÖ API tests completed"
      displayName: 'Run API tests'
      continueOnError: true 